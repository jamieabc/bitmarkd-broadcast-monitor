// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb1-client/v2 (interfaces: BatchPoints)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v2 "github.com/influxdata/influxdb1-client/v2"
	reflect "reflect"
)

// MockBatchPoints is a mock of BatchPoints interface
type MockBatchPoints struct {
	ctrl     *gomock.Controller
	recorder *MockBatchPointsMockRecorder
}

// MockBatchPointsMockRecorder is the mock recorder for MockBatchPoints
type MockBatchPointsMockRecorder struct {
	mock *MockBatchPoints
}

// NewMockBatchPoints creates a new mock instance
func NewMockBatchPoints(ctrl *gomock.Controller) *MockBatchPoints {
	mock := &MockBatchPoints{ctrl: ctrl}
	mock.recorder = &MockBatchPointsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchPoints) EXPECT() *MockBatchPointsMockRecorder {
	return m.recorder
}

// AddPoint mocks base method
func (m *MockBatchPoints) AddPoint(arg0 *v2.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPoint", arg0)
}

// AddPoint indicates an expected call of AddPoint
func (mr *MockBatchPointsMockRecorder) AddPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoint", reflect.TypeOf((*MockBatchPoints)(nil).AddPoint), arg0)
}

// AddPoints mocks base method
func (m *MockBatchPoints) AddPoints(arg0 []*v2.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPoints", arg0)
}

// AddPoints indicates an expected call of AddPoints
func (mr *MockBatchPointsMockRecorder) AddPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoints", reflect.TypeOf((*MockBatchPoints)(nil).AddPoints), arg0)
}

// Database mocks base method
func (m *MockBatchPoints) Database() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(string)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockBatchPointsMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockBatchPoints)(nil).Database))
}

// Points mocks base method
func (m *MockBatchPoints) Points() []*v2.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Points")
	ret0, _ := ret[0].([]*v2.Point)
	return ret0
}

// Points indicates an expected call of Points
func (mr *MockBatchPointsMockRecorder) Points() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Points", reflect.TypeOf((*MockBatchPoints)(nil).Points))
}

// Precision mocks base method
func (m *MockBatchPoints) Precision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(string)
	return ret0
}

// Precision indicates an expected call of Precision
func (mr *MockBatchPointsMockRecorder) Precision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockBatchPoints)(nil).Precision))
}

// RetentionPolicy mocks base method
func (m *MockBatchPoints) RetentionPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// RetentionPolicy indicates an expected call of RetentionPolicy
func (mr *MockBatchPointsMockRecorder) RetentionPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionPolicy", reflect.TypeOf((*MockBatchPoints)(nil).RetentionPolicy))
}

// SetDatabase mocks base method
func (m *MockBatchPoints) SetDatabase(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabase", arg0)
}

// SetDatabase indicates an expected call of SetDatabase
func (mr *MockBatchPointsMockRecorder) SetDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabase", reflect.TypeOf((*MockBatchPoints)(nil).SetDatabase), arg0)
}

// SetPrecision mocks base method
func (m *MockBatchPoints) SetPrecision(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrecision", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrecision indicates an expected call of SetPrecision
func (mr *MockBatchPointsMockRecorder) SetPrecision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrecision", reflect.TypeOf((*MockBatchPoints)(nil).SetPrecision), arg0)
}

// SetRetentionPolicy mocks base method
func (m *MockBatchPoints) SetRetentionPolicy(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRetentionPolicy", arg0)
}

// SetRetentionPolicy indicates an expected call of SetRetentionPolicy
func (mr *MockBatchPointsMockRecorder) SetRetentionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetentionPolicy", reflect.TypeOf((*MockBatchPoints)(nil).SetRetentionPolicy), arg0)
}

// SetWriteConsistency mocks base method
func (m *MockBatchPoints) SetWriteConsistency(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteConsistency", arg0)
}

// SetWriteConsistency indicates an expected call of SetWriteConsistency
func (mr *MockBatchPointsMockRecorder) SetWriteConsistency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteConsistency", reflect.TypeOf((*MockBatchPoints)(nil).SetWriteConsistency), arg0)
}

// WriteConsistency mocks base method
func (m *MockBatchPoints) WriteConsistency() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConsistency")
	ret0, _ := ret[0].(string)
	return ret0
}

// WriteConsistency indicates an expected call of WriteConsistency
func (mr *MockBatchPointsMockRecorder) WriteConsistency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConsistency", reflect.TypeOf((*MockBatchPoints)(nil).WriteConsistency))
}
