// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb1-client/models (interfaces: Point)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/influxdata/influxdb1-client/models"
	reflect "reflect"
	time "time"
)

// MockPoint is a mock of Point interface
type MockPoint struct {
	ctrl     *gomock.Controller
	recorder *MockPointMockRecorder
}

// MockPointMockRecorder is the mock recorder for MockPoint
type MockPointMockRecorder struct {
	mock *MockPoint
}

// NewMockPoint creates a new mock instance
func NewMockPoint(ctrl *gomock.Controller) *MockPoint {
	mock := &MockPoint{ctrl: ctrl}
	mock.recorder = &MockPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoint) EXPECT() *MockPointMockRecorder {
	return m.recorder
}

// AddTag mocks base method
func (m *MockPoint) AddTag(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTag", arg0, arg1)
}

// AddTag indicates an expected call of AddTag
func (mr *MockPointMockRecorder) AddTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockPoint)(nil).AddTag), arg0, arg1)
}

// AppendString mocks base method
func (m *MockPoint) AppendString(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendString", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// AppendString indicates an expected call of AppendString
func (mr *MockPointMockRecorder) AppendString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendString", reflect.TypeOf((*MockPoint)(nil).AppendString), arg0)
}

// FieldIterator mocks base method
func (m *MockPoint) FieldIterator() models.FieldIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldIterator")
	ret0, _ := ret[0].(models.FieldIterator)
	return ret0
}

// FieldIterator indicates an expected call of FieldIterator
func (mr *MockPointMockRecorder) FieldIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldIterator", reflect.TypeOf((*MockPoint)(nil).FieldIterator))
}

// Fields mocks base method
func (m *MockPoint) Fields() (models.Fields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].(models.Fields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fields indicates an expected call of Fields
func (mr *MockPointMockRecorder) Fields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockPoint)(nil).Fields))
}

// ForEachTag mocks base method
func (m *MockPoint) ForEachTag(arg0 func([]byte, []byte) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEachTag", arg0)
}

// ForEachTag indicates an expected call of ForEachTag
func (mr *MockPointMockRecorder) ForEachTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachTag", reflect.TypeOf((*MockPoint)(nil).ForEachTag), arg0)
}

// HasTag mocks base method
func (m *MockPoint) HasTag(arg0 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTag", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTag indicates an expected call of HasTag
func (mr *MockPointMockRecorder) HasTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTag", reflect.TypeOf((*MockPoint)(nil).HasTag), arg0)
}

// HashID mocks base method
func (m *MockPoint) HashID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HashID indicates an expected call of HashID
func (mr *MockPointMockRecorder) HashID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashID", reflect.TypeOf((*MockPoint)(nil).HashID))
}

// Key mocks base method
func (m *MockPoint) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockPointMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockPoint)(nil).Key))
}

// MarshalBinary mocks base method
func (m *MockPoint) MarshalBinary() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalBinary")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalBinary indicates an expected call of MarshalBinary
func (mr *MockPointMockRecorder) MarshalBinary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalBinary", reflect.TypeOf((*MockPoint)(nil).MarshalBinary))
}

// Name mocks base method
func (m *MockPoint) Name() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPointMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPoint)(nil).Name))
}

// PrecisionString mocks base method
func (m *MockPoint) PrecisionString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecisionString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// PrecisionString indicates an expected call of PrecisionString
func (mr *MockPointMockRecorder) PrecisionString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecisionString", reflect.TypeOf((*MockPoint)(nil).PrecisionString), arg0)
}

// Round mocks base method
func (m *MockPoint) Round(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Round", arg0)
}

// Round indicates an expected call of Round
func (mr *MockPointMockRecorder) Round(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Round", reflect.TypeOf((*MockPoint)(nil).Round), arg0)
}

// RoundedString mocks base method
func (m *MockPoint) RoundedString(arg0 time.Duration) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundedString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// RoundedString indicates an expected call of RoundedString
func (mr *MockPointMockRecorder) RoundedString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundedString", reflect.TypeOf((*MockPoint)(nil).RoundedString), arg0)
}

// SetName mocks base method
func (m *MockPoint) SetName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName
func (mr *MockPointMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockPoint)(nil).SetName), arg0)
}

// SetTags mocks base method
func (m *MockPoint) SetTags(arg0 models.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTags", arg0)
}

// SetTags indicates an expected call of SetTags
func (mr *MockPointMockRecorder) SetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockPoint)(nil).SetTags), arg0)
}

// SetTime mocks base method
func (m *MockPoint) SetTime(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTime", arg0)
}

// SetTime indicates an expected call of SetTime
func (mr *MockPointMockRecorder) SetTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTime", reflect.TypeOf((*MockPoint)(nil).SetTime), arg0)
}

// Split mocks base method
func (m *MockPoint) Split(arg0 int) []models.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", arg0)
	ret0, _ := ret[0].([]models.Point)
	return ret0
}

// Split indicates an expected call of Split
func (mr *MockPointMockRecorder) Split(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockPoint)(nil).Split), arg0)
}

// String mocks base method
func (m *MockPoint) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPointMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPoint)(nil).String))
}

// StringSize mocks base method
func (m *MockPoint) StringSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// StringSize indicates an expected call of StringSize
func (mr *MockPointMockRecorder) StringSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringSize", reflect.TypeOf((*MockPoint)(nil).StringSize))
}

// Tags mocks base method
func (m *MockPoint) Tags() models.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(models.Tags)
	return ret0
}

// Tags indicates an expected call of Tags
func (mr *MockPointMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockPoint)(nil).Tags))
}

// Time mocks base method
func (m *MockPoint) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time
func (mr *MockPointMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockPoint)(nil).Time))
}

// UnixNano mocks base method
func (m *MockPoint) UnixNano() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnixNano")
	ret0, _ := ret[0].(int64)
	return ret0
}

// UnixNano indicates an expected call of UnixNano
func (mr *MockPointMockRecorder) UnixNano() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnixNano", reflect.TypeOf((*MockPoint)(nil).UnixNano))
}
